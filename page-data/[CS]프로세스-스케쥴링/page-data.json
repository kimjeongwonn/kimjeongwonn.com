{"componentChunkName":"component---src-templates-blog-post-js","path":"/[CS]프로세스-스케쥴링/","result":{"data":{"site":{"siteMetadata":{"title":"kimjeongwonn"}},"markdownRemark":{"id":"1790aa5a-027e-5165-84ab-5e816c2b0687","excerpt":"배치 처리 시스템 시스템이 여러개의 프로그램을 순차적으로 처리하는 방식 Queue 자료구조와 비슷한 방식으로 동작 하나의 프로그램이 실행되는 동안 다른 작업을 하지 못함 → 한 번에 하나의 프로그램 처리만 가능 멀티 태스킹 단일 CPU…","html":"<h2>배치 처리 시스템</h2>\n<ul>\n<li>시스템이 여러개의 프로그램을 순차적으로 처리하는 방식\n<ul>\n<li>Queue 자료구조와 비슷한 방식으로 동작</li>\n</ul>\n</li>\n<li>하나의 프로그램이 실행되는 동안 다른 작업을 하지 못함 → 한 번에 하나의 프로그램 처리만 가능</li>\n</ul>\n<h2>멀티 태스킹</h2>\n<ul>\n<li>단일 CPU에서 다수의 응용 프로그램이 동시에 실행되는 것처럼 보이도록 하는 방법</li>\n</ul>\n<h3>시 분할 시스템</h3>\n<ul>\n<li>시간단위로 아주 잘게 분할해서 여러가지 프로그램을 번갈아가면서 처리하는 방식</li>\n<li>다중 사용자가 시스템을 사용할 수 있으며, 입력에 대한 응답시간을 최소화 할 수 있음</li>\n</ul>\n<h3>멀티 태스킹과 멀티 프로세싱</h3>\n<ul>\n<li>멀티 태스킹은 단일 CPU가 시분할 시스템을 이용해 동시에 여러가지 프로그램을 처리하는 것</li>\n<li>멀티 프로세싱은 다중 CPU가 하나의 프로그램을 병렬로 처리하는 것</li>\n</ul>\n<h3>멀티 프로그래밍</h3>\n<ul>\n<li>응용 프로그램은 CPU만 사용하는 것이 아니라, 다른 작업을 중간에 필요로 하는 경우가 많음\n<ul>\n<li>예) 저장 매체 사용, 입력 장치, 출력 장치 사용 등</li>\n</ul>\n</li>\n<li>하나의 응용프로그램이 CPU 외의 장치를 사용하면서 CPU를 사용하지 않으면서 점유할 때 다른 프로그램에서 CPU를 사용할 수 있도록 해서 CPU가 낭비되는 시간이 없도록 한다.</li>\n<li>CPU를 최대한 효율적으로 활용하도록 하는 시스템</li>\n</ul>\n<h2>프로세스</h2>\n<ul>\n<li>실행중인 프로그램의 실행단위 → 메모리 위에 올라가 있는 프로그램\n<ul>\n<li>코드 이미지(바이너리): 실행 파일</li>\n</ul>\n</li>\n<li><code class=\"language-text\">작업</code>, <code class=\"language-text\">Task</code>, <code class=\"language-text\">Job</code> 등 용어를 혼용하여 사용한다.</li>\n<li>응용 프로그램 ≠ 프로세스\n<ul>\n<li>응용 프로그램은 여러개의 프로세스로 이루어질 수 있음</li>\n<li>하나의 응용 프로그램이 기능을 처리하기 위해 다수의 프로세스가 상호작용하여 실행될 수 있음</li>\n</ul>\n</li>\n</ul>\n<h2>스케쥴러</h2>\n<ul>\n<li>스케쥴러는 프로세스의 실행을 단위별로 관리한다.</li>\n</ul>\n<h3>스케쥴링 알고리즘</h3>\n<ul>\n<li>프로세스를 실행시키는 순서와 방법을 결정하는 알고리즘</li>\n<li>시 분할 시스템을 구현 → 프로세스 응답 시간을 최대한 짧게</li>\n<li>멀티 프로그래밍을 구현 → CPU의 활용도를 최대한 높여서 효율적으로</li>\n</ul>\n<h3>FIFO 스케쥴러</h3>\n<ul>\n<li>프로세스를 처음부터 끝까지 순차적으로 처리하는 가장 간단한 스케줄러</li>\n<li>배치 처리 시스템과 가장 유사</li>\n<li>FCFS(First Come First Served) 스케쥴러라고 부르기도 함</li>\n</ul>\n<h3>SFJ 스케쥴러</h3>\n<ul>\n<li>Shortest Job First 스케쥴러 → 최단 작업 우선</li>\n<li>프로세스의 작업 시간을 알고 있을 때 가장 빠른 프로세스를 먼저 처리하는 스케줄러</li>\n<li>장점\n<ul>\n<li>FIFO 스케쥴러 보다 응답시간이 짧을 수 있음</li>\n<li>같은 시간 내에 더 많은 프로세스를 처리할 수 있음</li>\n</ul>\n</li>\n<li>단점\n<ul>\n<li>프로세스의 작업 시간을 미리 모두 알아야 함</li>\n<li>작업 시간이 오래 걸리는 프로세스는 계속해서 우선순위가 뒤로 밀리게 됨</li>\n</ul>\n</li>\n</ul>\n<h3>우선순위 기반 스케쥴러</h3>\n<ul>\n<li>Priority-Based 스케쥴러</li>\n<li>우선순위를 정하는 기준은 정적 우선순위, 동적 우선순위가 있다</li>\n<li>정적 우선순위\n<ul>\n<li>프로세스마다 우선순위를 미리 지정한다</li>\n</ul>\n</li>\n<li>동적 우선순위\n<ul>\n<li>스케쥴러가 상황에 따라 우선순위를 동적으로 변경한다</li>\n<li>시스템이 목표하는 기준에 맞춰 이전에 처리한 내용을 기반으로 우선순위를 결정한다.</li>\n</ul>\n</li>\n</ul>\n<h3>Round Robin 스케쥴러</h3>\n<ul>\n<li>시 분할 시스템을 기반으로 동작하는 스케쥴러</li>\n<li>대기 큐에 있는 프로세스를 FCFS 방식으로 처리한다.</li>\n<li>지정된 시간 내에 프로세스가 모두 처리가 되지 않으면 다시 대기 큐에 넣는다.</li>\n</ul>","frontmatter":{"title":"[CS] 프로세스 - 스케쥴링","date":"2021-08-17T08:29:30.000Z","description":null}},"previous":{"fields":{"slug":"/[CS]운영체제-인터페이스/"},"frontmatter":{"title":"[CS] 운영체제 - 인터페이스"}},"next":null},"pageContext":{"id":"1790aa5a-027e-5165-84ab-5e816c2b0687","previousPostId":"73fe5045-2056-51cd-9476-d57bcbadfd24","nextPostId":null}},"staticQueryHashes":["2841359383"]}