{"componentChunkName":"component---src-templates-blog-post-js","path":"/[CS]스레드/","result":{"data":{"site":{"siteMetadata":{"title":"kimjeongwonn"}},"markdownRemark":{"id":"bd42d8ef-98f2-5fd4-a28b-01b6b60dca46","excerpt":"Light Weight Process 라고 부르기도 함 → 프로세스 처럼 동작하지만 더 가볍고 작음 프로세스는 기본적으로 직접적으로 데이터 접근이 불가능 → IPC…","html":"<ul>\n<li>Light Weight Process 라고 부르기도 함 → 프로세스 처럼 동작하지만 더 가볍고 작음</li>\n<li>프로세스는 기본적으로 직접적으로 데이터 접근이 불가능 → IPC 기법을 활용해 간접적으로 데이터 통신을 사용</li>\n<li>스레드는 하나의 프로세스 안에서 생성되며 다수의 스레드 생성 가능</li>\n<li>스레드들은 동시에 실행 가능 → 병렬 처리가 가능</li>\n<li>하나의 프로세스 안에서 동작하므로 프로세스 내부의 데이터를 공유하며 접근 가능</li>\n</ul>\n<h2>스레드의 구조</h2>\n<ul>\n<li>하나의 프로세스 내에서 스택과 레지스터(PC, SP)를 스레드별로 별도로 관리한다.\n<ul>\n<li>실제로는 프로세스의 스택과 힙 영역 사이에 공간을 할당한다.</li>\n</ul>\n</li>\n<li>때문에 스택영역 외(힙, 코드, 데이터)에는 하나의 프로세스 내에서 스레드끼리 공유가 가능하다</li>\n</ul>\n<h2>멀티 태스킹 / 멀티 프로세싱</h2>\n<h3>멀티 태스킹</h3>\n<ul>\n<li>다수의 프로세스를 하나의 CPU가 빠르게 교체하면서 작업하여 동시에 여러개의 프로세스가 구동되는 것처럼 하는 기능</li>\n<li>스케쥴러와 컨텍스트 스위칭을 통해 구현할 수 있음</li>\n</ul>\n<h3>멀티 프로세싱</h3>\n<ul>\n<li>하나 혹은 다수의 프로세스를 다수의 코어가 분할하여 작업을 처리하는 방법</li>\n<li>하나의 프로세스 내의 다수의 스레드를 각 코어가 병렬로 처리해 하나의 프로세스의 작업을 다수의 코어가 나누어 처리할 수 있음</li>\n</ul>\n<h2>장단점</h2>\n<h3>장점</h3>\n<ul>\n<li>프로세스 내에서 기능별로 스레드를 구분하면, 하나의 기능이 지연되어도 프로세스의 응답성을 보장할 수 있음</li>\n<li>프로세스 내의 스레드 사이에서 공유되는 영역(코드, 힙, 데이터)에서 IPC처리 없이 직접 자원 공유가 가능</li>\n<li>하나의 프로세스 내에서 다수의 스택을 사용하기 때문에 시스템자원을 절약할 수 있음</li>\n</ul>\n<h3>단점</h3>\n<ul>\n<li>프로세스 내부의 하나의 스레드에만 문제가 생겨도 전체 프로세스가 영향을 받음\n<ul>\n<li>크롬 브라우저에서는 멀티 프로세스를 활용하기 때문에 하나의 탭에 문제가 생겨도 다른 탭에 영향이 없음</li>\n</ul>\n</li>\n<li>스레드를 많이 생성하게 되면 컨텍스트 스위칭이 자주 일어나 성능이 저하될 수 있음 → 리눅스에서는 쓰레드와 프로세스를 같이 다루기 때문에 모두 스케쥴링 하게 됨</li>\n<li>프로그램이 복잡해짐</li>\n</ul>\n<h2>동기화 이슈</h2>\n<ul>\n<li>다수의 스레드 사이의 실행 순서는 보장되지 않기 때문에 공유된 변수를 사용할 때 예측하지 못한 동작이 일어날 수 있음</li>\n<li>그렇기 때문에 스레드를 별도로 관리해서 동기화 이슈를 처리해야 함</li>\n</ul>","frontmatter":{"title":"[CS] 스레드","date":"2021-08-26T12:15:53.000Z","description":null}},"previous":{"fields":{"slug":"/[CS]프로세스/"},"frontmatter":{"title":"[CS] 프로세스"}},"next":null},"pageContext":{"id":"bd42d8ef-98f2-5fd4-a28b-01b6b60dca46","previousPostId":"c262d8a5-6d2a-5873-89aa-1e61ea4f13a7","nextPostId":null}},"staticQueryHashes":["2841359383"]}